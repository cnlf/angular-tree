{"version":3,"sources":["tree-directive.js"],"names":["module","angular","directive","$timeout","restrict","template","replace","scope","treeData","treeControl","onSelect","initialSelection","link","element","attrs","hasChildren","branch","children","isArray","length","forEachCurrData","callback","doEach","level","forEach","item","currData","selectBranch","selectedBranch","selected","id","expandAllParents","getParent","parent","_parentId","_id","currBranch","expanded","watchOriginalDataHandler","push","JSON","parse","stringify","_level","expandLevel","watchCurrDataHandler","addBranchToList","visible","treeIcon","noLeaf","isLeaf","iconCollapse","iconExpand","iconLeaf","rowData","label","isVisible","Math","random","toString","substring","parseInt","clickBranchHandler","$watch","isObject","tree","expandAll","b","collapseAll","getFirstBranch","n","selectFirstBranch","firstBranch","getSelectedBranch","getParentBranch","selectParentBranch","parentBranch","addBranch","newBranch","addRootBranch","expandBranch","console","log","collapseBranch","getSiblings","siblings","getNextSibling","i","indexOf","getPrevSibling","selectNextSibling","nextSibling","selectPrevSibling","prevSibling","getFirstChild","child","getClosestAncestorNextSibling","getNextBranch","firstChild","selectNextBranch","next","lastDescendant","lastChild","getPrevBranch","selectPrevBranch","prevBranch","call","window"],"mappings":"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","file":"tree-directive.min.js","sourcesContent":["/**\n * @file 基于Angular 1.x的数控件\n * @author wlf-21@163.com\n */\n\n(function () {\n    let module = angular.module('angularTree', []);\n    module.directive('uiTree', ['$timeout', function ($timeout) {\n        return {\n            restrict: 'AE',\n            template: `\n                <ul class=\"angular-tree\">\n                    <li ng-repeat=\"row in rowData | filter:{visible:true} track by row.branch._id\" \n                   ng-class=\"{'active': row.branch.selected, 'tree-leaf': row.isLeaf}\"\n                    class=\"angular-tree-row level-{{row.level}}\">\n                        <a ng-click=\"clickBranchHandler(row.branch)\">\n                            <i ng-class=\"row.treeIcon\" \n                            ng-click=\"row.branch.expanded = !row.branch.expanded\" \n                            class=\"indented tree-icon\"></i>\n                            <span class=\"indented tree-label\">{{row.label}}</span>\n                        </a>\n                    </li>\n                </ul>`,\n            replace: true,\n            scope: {\n                treeData: '=',\n                treeControl: '=',\n                onSelect: '&',\n                initialSelection: '@'\n            },\n            link: function (scope, element, attrs) {\n                let selectedBranch = null;\n                let expandLevel = parseInt(attrs.expandLevel, 10);\n                if (!attrs.iconExpand) {\n                    attrs.iconExpand = 'fa fa-plus';\n                }\n                if (!attrs.iconCollapse) {\n                    attrs.iconCollapse = 'fa fa-minus';\n                }\n                if (!attrs.iconLeaf) {\n                    attrs.iconLeaf = 'fa fa-file-archive-o';\n                }\n                if (!attrs.expandLevel) {\n                    attrs.expandLevel = '3';\n                }\n                if (!scope.treeData || !angular.isArray(scope.treeData)) {\n                    console.log('数据没有定义或不正确');\n                    return;\n                }\n\n                function hasChildren(branch) {\n                    return branch.children && angular.isArray(branch.children) && branch.children.length\n                }\n\n                function forEachCurrData(callback) {\n                    let doEach = function (branch, level) {\n                        callback(branch, level);\n                        if (hasChildren(branch)) {\n                            angular.forEach(branch.children, function (item) {\n                                doEach(item, level + 1);\n                            });\n                        }\n                    };\n                    angular.forEach(scope.currData, function (item) {\n                        doEach(item, 1);\n                    })\n                }\n\n                function selectBranch(branch) {\n                    if (!branch) {\n                        if (selectedBranch !== null) {\n                            selectedBranch.selected = false;\n                        }\n                        selectedBranch = null;\n                        return;\n                    }\n\n                    if (!selectedBranch || branch.id !== selectedBranch.id) {\n                        if (selectedBranch !== null) {\n                            selectedBranch.selected = false;\n                        }\n                        branch.selected = true;\n                        selectedBranch = branch;\n                        expandAllParents(branch);\n                        if (branch.onSelect) {\n                            return $timeout(function () {\n                                return branch.onSelect(branch);\n                            });\n                        } else {\n                            if (scope.onSelect) {\n                                return $timeout(function () {\n                                    return scope.onSelect({\n                                        branch: branch\n                                    });\n                                });\n                            }\n                        }\n                    }\n                }\n\n                function getParent(branch) {\n                    let parent = void 0;\n\n                    if (branch._parentId) {\n                        forEachCurrData(function (item) {\n                            if (item._id === branch._parentId) {\n                                return parent = item;\n                            }\n                        });\n                    }\n                    return parent;\n                }\n\n                function expandAllParents(currBranch) {\n                    let doEach = function (branch, callback) {\n                        let parent = getParent(branch);\n                        if (parent) {\n                            callback(parent);\n                            doEach(parent, callback);\n                        }\n                    };\n                    doEach(currBranch, function (branch) {\n                        branch.expanded = true;\n                    });\n                }\n\n                function watchOriginalDataHandler() {\n                    scope.currData = [];\n\n                    angular.forEach(scope.treeData, function (item) {\n                        item && scope.currData.push(JSON.parse(JSON.stringify(item)));\n                    });\n\n                    forEachCurrData(function (branch, level) {\n                        branch._level = level;\n                        branch.expanded = branch._level <= expandLevel;\n                    });\n                    watchCurrDataHandler();\n                }\n\n                function watchCurrDataHandler() {\n                    forEachCurrData(function (branch) {\n                        if (!branch._id) {\n                            branch._id = Math.random().toString(16).substring(2);\n                        }\n\n                        if (!branch.children) {\n                            branch.children = [];\n                        }\n\n                        if (hasChildren(branch)) {\n                            angular.forEach(branch.children, function (item) {\n                                item._parentId = branch._id;\n                            })\n                        }\n                    });\n\n                    function addBranchToList(level, branch, visible) {\n                        let treeIcon;\n\n                        if (!branch.expanded) {\n                            branch.expanded = false;\n                        }\n\n                        if (!branch.noLeaf && !hasChildren(branch)) {\n                            treeIcon = attrs.iconLeaf;\n                            branch.isLeaf = true;\n                        } else {\n                            branch.isLeaf = false;\n                            if (branch.expanded) {\n                                treeIcon = attrs.iconCollapse;\n                            } else {\n                                treeIcon = attrs.iconExpand;\n                            }\n                        }\n\n                        scope.rowData.push({\n                            level: level,\n                            branch: branch,\n                            label: branch.label,\n                            isLeaf: branch.isLeaf,\n                            treeIcon: treeIcon,\n                            visible: visible\n                        });\n\n                        if (hasChildren(branch)) {\n                            angular.forEach(branch.children, function (item) {\n                                let isVisible = visible && branch.expanded;\n                                addBranchToList(level + 1, item, isVisible);\n                            })\n                        }\n                    }\n\n                    scope.rowData = [];\n                    angular.forEach(scope.currData, function (item) {\n                        addBranchToList(1, item, true)\n                    });\n                }\n\n                scope.clickBranchHandler = function (branch) {\n                    if (!selectedBranch || selectedBranch.id !== branch.id) {\n                        selectBranch(branch);\n                    }\n                };\n\n                scope.currData = [];\n                scope.$watch('treeData', watchOriginalDataHandler, true);\n                scope.$watch('currData', watchCurrDataHandler, true);\n\n                if (scope.treeControl && angular.isObject(scope.treeControl)) {\n                    let tree = scope.treeControl || {};\n\n                    /**\n                     * 展开所有节点\n                     */\n                    tree.expandAll = function () {\n                        return forEachCurrData(function (b) {\n                            return b.expanded = true;\n                        });\n                    };\n\n                    /**\n                     * 折叠所有节点\n                     */\n                    tree.collapseAll = function () {\n                        return forEachCurrData(function (b) {\n                            return b.expanded = false;\n                        });\n                    };\n\n                    /**\n                     * 获取第一个节点\n                     */\n                    tree.getFirstBranch = function () {\n                        let n = scope.currData.length;\n                        if (n > 0) {\n                            return scope.currData[0];\n                        }\n                        else {\n                            return null;\n                        }\n                    };\n\n                    /**\n                     * 选择第一个节点\n                     */\n                    tree.selectFirstBranch = function () {\n                        let firstBranch = tree.getFirstBranch();\n                        return tree.selectBranch(firstBranch);\n                    };\n\n                    /**\n                     * 获取已选择的节点\n                     */\n                    tree.getSelectedBranch = function () {\n                        return selectedBranch;\n                    };\n\n                    /**\n                     * 获取父级节点\n                     */\n                    tree.getParentBranch = function (branch) {\n                        if (!branch) {\n                            branch = tree.getSelectedBranch();\n                        }\n                        return getParent(branch);\n                    };\n\n                    /**\n                     * 选择节点\n                     *\n                     * @param {Object} branch 节点数据\n                     */\n                    tree.selectBranch = function (branch) {\n                        selectBranch(branch);\n                    };\n\n                    /**\n                     * 选择父级节点\n                     *\n                     * @param {Object} branch 节点数据\n                     */\n                    tree.selectParentBranch = function (branch) {\n                        if (!branch) {\n                            branch = tree.getSelectedBranch();\n                        }\n                        if (branch) {\n                            let parentBranch = tree.getParentBranch(branch);\n                            if (parentBranch !== null) {\n                                tree.selectBranch(parentBranch);\n                            }\n                        }\n                    };\n\n                    /**\n                     * 添加节点\n                     *\n                     * @param parent 父级节点\n                     * @param newBranch 新的节点数据\n                     */\n                    tree.addBranch = function (parent, newBranch) {\n                        if (parent !== null) {\n                            parent.children.push(newBranch);\n                            parent.expanded = true;\n                        }\n                        else {\n                            scope.currData.push(newBranch);\n                        }\n                    };\n\n                    /**\n                     * 添加根节点\n                     *\n                     * @param newBranch 新的节点数据\n                     */\n                    tree.addRootBranch = function (newBranch) {\n                        tree.addBranch(null, newBranch);\n                    };\n\n                    /**\n                     * 展开当前节点\n                     */\n                    tree.expandBranch = function () {\n                        let selectedBranch = tree.getSelectedBranch();\n                        if (selectedBranch) {\n                            if (hasChildren(selectedBranch)) {\n                                selectedBranch.expanded = true;\n                            }\n                            else {\n                                console.log('没有子节点');\n                            }\n                        }\n                        else {\n                            console.log('请选择节点');\n                        }\n                    };\n\n                    /**\n                     * 展开当前节点\n                     */\n                    tree.collapseBranch = function () {\n                        let selectedBranch = tree.getSelectedBranch();\n\n                        if (selectedBranch) {\n                            if (hasChildren(selectedBranch)) {\n                                selectedBranch.expanded = false;\n                            }\n                            else {\n                                console.log('没有子节点');\n                            }\n                        }\n                        else {\n                            console.log('请选择节点');\n                        }\n                    };\n\n                    /**\n                     * 获取兄弟节点\n                     * @param {Object} branch 当前节点\n                     * @return {Array} 所有兄弟节点\n                     */\n                    tree.getSiblings = function (branch) {\n                        let siblings;\n                        let selectedBranch;\n\n                        if (!branch) {\n                            selectedBranch = tree.getSelectedBranch();\n                        }\n                        else {\n                            selectedBranch = branch;\n                        }\n\n                        let parent = tree.getParentBranch(selectedBranch);\n                        if (parent) {\n                            siblings = parent.children;\n                        }\n                        else {\n                            siblings = scope.currData;\n                        }\n                        return siblings;\n                    };\n\n                    /**\n                     * 获取下一个兄弟节点\n                     *\n                     * @param {Object} branch 当前节点\n                     * @return {*}\n                     */\n                    tree.getNextSibling = function (branch) {\n                        if (!branch) {\n                            branch = tree.getSelectedBranch();\n                        }\n                        if (branch) {\n                            let siblings = tree.getSiblings(branch);\n                            let n = siblings.length;\n                            let i = siblings.indexOf(branch);\n                            if (i < n) {\n                                return siblings[i + 1] || null;\n                            }\n                            else {\n                                return null;\n                            }\n                        }\n                    };\n\n                    /**\n                     * 获取上一个兄弟节点\n                     *\n                     * @param {Object} branch 当前节点\n                     * @return {*}\n                     */\n                    tree.getPrevSibling = function (branch) {\n                        if (!branch) {\n                            branch = tree.getSelectedBranch();\n                        }\n                        let siblings = tree.getSiblings(branch);\n                        let i = siblings.indexOf(branch);\n                        if (i > 0) {\n                            return siblings[i - 1];\n                        }\n                    };\n\n                    /**\n                     * 选择下一个兄弟节点\n                     *\n                     * @param {Object} branch 当前节点\n                     */\n                    tree.selectNextSibling = function (branch) {\n                        if (!branch) {\n                            branch = tree.getSelectedBranch();\n                        }\n                        if (branch) {\n                            let nextSibling = tree.getNextSibling(branch);\n                            if (nextSibling) {\n                                tree.selectBranch(nextSibling);\n                            }\n                        }\n                    };\n\n                    /**\n                     * 选择上一个兄弟节点\n                     *\n                     * @param {Object} branch 当前节点\n                     */\n                    tree.selectPrevSibling = function (branch) {\n                        if (!branch) {\n                            branch = tree.getSelectedBranch();\n                        }\n                        if (branch) {\n                            let prevSibling = tree.getPrevSibling(branch);\n                            if (prevSibling) {\n                                tree.selectBranch(prevSibling);\n                            }\n                        }\n                    };\n\n                    /**\n                     * 获取第一个字节点\n                     * @param branch 当前节点\n                     * @returns {Object} 第一个字节点\n                     */\n                    tree.getFirstChild = function (branch) {\n                        if (!branch) {\n                            branch = tree.getSelectedBranch();\n                        }\n                        if (branch) {\n                            let child = branch.children;\n                            if (child && child.length) {\n                                return branch.children[0];\n                            }\n                        }\n                    };\n\n                    /**\n                     * 获取最近的祖先兄弟\n                     * @param branch 当前节点\n                     * @returns {*}\n                     */\n                    tree.getClosestAncestorNextSibling = function (branch) {\n                        let nextSibling = tree.getNextSibling(branch);\n                        if (nextSibling) {\n                            return nextSibling;\n                        }\n                        else {\n                            let parentBranch = tree.getParentBranch(branch);\n                            if (parentBranch) {\n                                return tree.getClosestAncestorNextSibling(parentBranch);\n                            }\n                            else {\n                                return null;\n                            }\n                        }\n                    };\n\n                    /**\n                     * 获取下一个节点\n                     * @param {Object} branch 当前节点\n                     * @return {Object} 节点数据\n                     */\n                    tree.getNextBranch = function (branch) {\n                        if (!branch) {\n                            branch = tree.getSelectedBranch();\n                        }\n                        if (branch) {\n                            let firstChild = tree.getFirstChild(branch);\n                            if (firstChild) {\n                                return firstChild;\n                            }\n                            else {\n                                return tree.getClosestAncestorNextSibling(branch);\n                            }\n                        }\n\n                    };\n\n                    /**\n                     * 选择下一个节点\n                     *\n                     * @param {Object} branch 当前节点数据\n                     */\n                    tree.selectNextBranch = function (branch) {\n                        if (!branch) {\n                            branch = tree.getSelectedBranch();\n                        }\n                        if (branch) {\n                            let next = tree.getNextBranch(branch);\n                            if (next) {\n                                tree.selectBranch(next);\n                            }\n                        }\n                    };\n\n                    tree.lastDescendant = function (branch) {\n                        if (!branch) {\n                            return;\n                        }\n\n                        let length = branch.children.length;\n                        if (length === 0) {\n                            return branch;\n                        }\n                        else {\n                            let lastChild = branch.children[length - 1];\n                            return tree.lastDescendant(lastChild);\n                        }\n                    };\n\n                    /**\n                     * 获取上一个节点\n                     * @param {Object} branch 当前节点\n                     * @return {Object} 节点数据\n                     */\n                    tree.getPrevBranch = function (branch) {\n                        if (!branch) {\n                            branch = tree.getSelectedBranch();\n                        }\n\n                        if (branch) {\n                            let prevSibling = tree.getPrevSibling(branch);\n                            if (prevSibling) {\n                                return tree.lastDescendant(prevSibling);\n                            } else {\n                                return tree.getParentBranch(branch);\n                            }\n                        }\n                    };\n\n                    /**\n                     * 选择下一个节点\n                     *\n                     * @param {Object} branch 当前节点数据\n                     */\n                    tree.selectPrevBranch = function (branch) {\n                        if (!branch) {\n                            branch = tree.getSelectedBranch();\n                        }\n\n                        if (branch) {\n                            let prevBranch = tree.getPrevBranch(branch);\n                            if (prevBranch) {\n                                return tree.selectBranch(prevBranch);\n                            }\n                        }\n                    };\n\n                }\n            }\n        };\n    }]);\n\n}).call(window);\n"]}